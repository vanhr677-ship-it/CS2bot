# -*- coding: utf-8 -*-
"""
Telegram –±–æ—Ç –¥–ª—è CS2 —Ç—É—Ä–Ω—ñ—Ä—É
–§—É–Ω–∫—Ü—ñ—ó: —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è, —Ä–æ–∑—Å–∏–ª–∫–∞, —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É
–ü–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è–º —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º –∫–æ–º–∞–Ω–¥
"""

import logging
import json
import os
import re
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ============= –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =============
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [int(os.getenv("ADMIN_ID"))]
GROUP_LINK = os.getenv("GROUP_LINK")
CHANNEL_LINK = os.getenv("CHANNEL_LINK")
# ===========================================

# –°—Ç–∞–Ω–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
(TEAM_NAME, TEAM_TAG, 
 CAP_NICK, CAP_NAME, CAP_AGE, CAP_STEAM, CAP_DISCORD, CAP_TG,
 P2_NICK, P2_NAME, P2_AGE, P2_STEAM,
 P3_NICK, P3_NAME, P3_AGE, P3_STEAM,
 P4_NICK, P4_NAME, P4_AGE, P4_STEAM,
 P5_NICK, P5_NAME, P5_AGE, P5_STEAM,
 COMMENTS, CONFIRM) = range(26)

# –°—Ç–∞–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
EDIT_SELECT_TEAM, EDIT_SELECT_FIELD, EDIT_INPUT_VALUE = range(3)

# –§–∞–π–ª–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
REGISTRATIONS_FILE = 'registrations.json'
SUBSCRIBERS_FILE = 'subscribers.json'

# ============= –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –î–ê–ù–ò–ú–ò =============

def load_data(filename):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return [] if filename == REGISTRATIONS_FILE else []

def save_data(filename, data):
    """–ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ —É —Ñ–∞–π–ª"""
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def add_subscriber(user_id):
    """–î–æ–¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞"""
    subscribers = load_data(SUBSCRIBERS_FILE)
    if user_id not in subscribers:
        subscribers.append(user_id)
        save_data(SUBSCRIBERS_FILE, subscribers)
        return True
    return False

def is_admin(user_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω"""
    return user_id in ADMIN_IDS

def validate_steam_id(steam_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ Steam ID –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏"""
    return steam_id.isdigit() and len(steam_id) >= 8

def get_team_by_index(index):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º"""
    registrations = load_data(REGISTRATIONS_FILE)
    if 0 <= index < len(registrations):
        return registrations[index]
    return None

def update_team(index, team_data):
    """–û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∏"""
    registrations = load_data(REGISTRATIONS_FILE)
    if 0 <= index < len(registrations):
        registrations[index] = team_data
        save_data(REGISTRATIONS_FILE, registrations)
        return True
    return False

def delete_team(index):
    """–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É"""
    registrations = load_data(REGISTRATIONS_FILE)
    if 0 <= index < len(registrations):
        deleted = registrations.pop(index)
        save_data(REGISTRATIONS_FILE, registrations)
        return deleted
    return None

# ============= –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ =============

def get_main_menu():
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton("üéÆ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É", callback_data='register')],
        [InlineKeyboardButton("üì¢ –ù–∞—à–∞ –≥—Ä—É–ø–∞", url=GROUP_LINK)],
        [InlineKeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç—É—Ä–Ω—ñ—Ä", callback_data='info')],
        [InlineKeyboardButton("üèÜ –ü—Ä–∏–∑–∏", callback_data='prizes')],
        [InlineKeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞", callback_data='rules')],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_menu():
    """–ú–µ–Ω—é –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"""
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("üìã –í—Å—ñ –∫–æ–º–∞–Ω–¥–∏ (–¥–µ—Ç–∞–ª—å–Ω–æ)", callback_data='admin_teams_full')],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É", callback_data='admin_edit')],
        [InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É", callback_data='admin_delete')],
        [InlineKeyboardButton("üì¢ –†–æ–∑—Å–∏–ª–∫–∞", callback_data='admin_broadcast')],
        [InlineKeyboardButton("üéÅ –†–æ–∑—ñ–≥—Ä–∞—à", callback_data='admin_giveaway')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
    ]
    return InlineKeyboardMarkup(keyboard)

def format_team_full(team, index):
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É"""
    text = (
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üìã –ö–û–ú–ê–ù–î–ê #{index + 1}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üèÜ –ù–∞–∑–≤–∞: {team['team_name']}\n"
        f"üîñ –¢–µ–≥: [{team['team_tag']}]\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {team.get('timestamp', '–ù/–î')[:10]}\n"
        f"üë§ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {team.get('user_id', '–ù/–î')}\n\n"
        f"üëë –ö–ê–ü–Ü–¢–ê–ù:\n"
        f"‚îú –ù—ñ–∫: {team['cap_nick']}\n"
        f"‚îú –Ü–º'—è: {team['cap_name']}\n"
        f"‚îú –í—ñ–∫: {team['cap_age']} —Ä–æ–∫—ñ–≤\n"
        f"‚îú Steam ID: {team['cap_steam']}\n"
        f"‚îú Discord: {team['cap_discord']}\n"
        f"‚îî Telegram: {team['cap_tg']}\n\n"
        f"üë• –ì–†–ê–í–ï–¶–¨ 2:\n"
        f"‚îú –ù—ñ–∫: {team['p2_nick']}\n"
        f"‚îú –Ü–º'—è: {team['p2_name']}\n"
        f"‚îú –í—ñ–∫: {team['p2_age']} —Ä–æ–∫—ñ–≤\n"
        f"‚îî Steam ID: {team['p2_steam']}\n\n"
        f"üë• –ì–†–ê–í–ï–¶–¨ 3:\n"
        f"‚îú –ù—ñ–∫: {team['p3_nick']}\n"
        f"‚îú –Ü–º'—è: {team['p3_name']}\n"
        f"‚îú –í—ñ–∫: {team['p3_age']} —Ä–æ–∫—ñ–≤\n"
        f"‚îî Steam ID: {team['p3_steam']}\n\n"
        f"üë• –ì–†–ê–í–ï–¶–¨ 4:\n"
        f"‚îú –ù—ñ–∫: {team['p4_nick']}\n"
        f"‚îú –Ü–º'—è: {team['p4_name']}\n"
        f"‚îú –í—ñ–∫: {team['p4_age']} —Ä–æ–∫—ñ–≤\n"
        f"‚îî Steam ID: {team['p4_steam']}\n\n"
        f"üë• –ì–†–ê–í–ï–¶–¨ 5:\n"
        f"‚îú –ù—ñ–∫: {team['p5_nick']}\n"
        f"‚îú –Ü–º'—è: {team['p5_name']}\n"
        f"‚îú –í—ñ–∫: {team['p5_age']} —Ä–æ–∫—ñ–≤\n"
        f"‚îî Steam ID: {team['p5_steam']}\n\n"
        f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ: {team.get('comments', '–ù–µ–º–∞—î')}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    )
    return text

# ============= –û–°–ù–û–í–ù–Ü –ö–û–ú–ê–ù–î–ò =============

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    user_id = user.id

    add_subscriber(user_id)

    welcome_text = (
        f"üî• –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
        f"–¶–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –±–æ—Ç —Ç—É—Ä–Ω—ñ—Ä—É CS2\n"
        f"üí∞ –ü—Ä–∏–∑–æ–≤–∏–π —Ñ–æ–Ω–¥: $200 + $50 MVP\n\n"
        f"üìÖ –î–∞—Ç–∞: –õ–∏—Å—Ç–æ–ø–∞–¥ 2025\n"
        f"üéÆ –§–æ—Ä–º–∞—Ç: 5v5\n"
        f"üá∫üá¶ –†–µ–≥—ñ–æ–Ω: –£–∫—Ä–∞—ó–Ω–∞\n"
        f"üîû –í—ñ–∫: 16+\n\n"
        f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:"
    )

    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=get_main_menu())
    else:
        await update.callback_query.message.edit_text(welcome_text, reply_markup=get_main_menu())

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin - –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")
        return

    await update.message.reply_text(
        "üîß –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=get_admin_menu()
    )

# ============= CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =============

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == 'back_to_main':
        await start(update, context)

    elif data == 'register':
        await query.message.edit_text(
            "üìù –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –ö–û–ú–ê–ù–î–ò\n\n"
            "–©–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/register\n\n"
            "–ë–æ—Ç –ø—Ä–æ–≤–µ–¥–µ –≤–∞—Å —á–µ—Ä–µ–∑ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')
            ]])
        )

    elif data == 'info':
        info_text = (
            "‚ÑπÔ∏è –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –¢–£–†–ù–Ü–†\n\n"
            "üìÖ –î–∞—Ç–∞: –õ–∏—Å—Ç–æ–ø–∞–¥ 2025\n"
            "üéÆ –ì—Ä–∞: Counter-Strike 2\n"
            "üë• –§–æ—Ä–º–∞—Ç: 5 –Ω–∞ 5\n"
            "üá∫üá¶ –†–µ–≥—ñ–æ–Ω: –£–∫—Ä–∞—ó–Ω–∞\n"
            "üîû –í—ñ–∫: 16+\n\n"
            "üìç –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Online\n"
            "üéØ –°–∏—Å—Ç–µ–º–∞: Single Elimination / Swiss\n"
            "‚è∞ –ß–∞—Å –º–∞—Ç—á—ñ–≤: –ó–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º\n\n"
            "üì¢ –ì—Ä—É–ø–∞ —Ç—É—Ä–Ω—ñ—Ä—É: " + GROUP_LINK
        )
        await query.message.edit_text(
            info_text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')
            ]])
        )

    elif data == 'prizes':
        prizes_text = (
            "üèÜ –ü–†–ò–ó–ò\n\n"
            "üí∞ 1 –º—ñ—Å—Ü–µ: $200\n"
            "‚≠ê MVP —Ç—É—Ä–Ω—ñ—Ä—É: $50\n\n"
            "–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–∑–æ–≤–∏–π —Ñ–æ–Ω–¥: $250\n\n"
            "üéÅ –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–∏–∑–∏:\n"
            "‚Ä¢ –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ä–æ–ª—ñ –≤ Discord\n"
            "‚Ä¢ –§—ñ—á–µ—Ä –≤ —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö\n"
            "‚Ä¢ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –º–∞–π–±—É—Ç–Ω—ñ —Ç—É—Ä–Ω—ñ—Ä–∏\n\n"
            "üí≥ –í–∏–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑:\n"
            "‚Ä¢ Monobank\n"
            "‚Ä¢ PrivatBank\n"
            "‚Ä¢ USDT (TRC20)"
        )
        await query.message.edit_text(
            prizes_text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')
            ]])
        )

    elif data == 'rules':
        rules_text = (
            "üìã –ü–†–ê–í–ò–õ–ê –¢–£–†–ù–Ü–†–£\n\n"
            "‚úÖ –ó–∞–≥–∞–ª—å–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞:\n"
            "‚Ä¢ –û—Ñ—ñ—Ü—ñ–π–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ CS2 Competitive\n"
            "‚Ä¢ –ê–Ω—Ç—ñ-—á—ñ—Ç –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π\n"
            "‚Ä¢ –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —á–∏—Ç—ñ–≤\n"
            "‚Ä¢ –¢–∞–π–º-–∞—É—Ç–∏: 4 –ø–∞—É–∑–∏ –ø–æ 30 —Å–µ–∫\n\n"
            "üéÆ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n"
            "‚Ä¢ MR12 (12 —Ä–∞—É–Ω–¥—ñ–≤ –¥–æ –∑–º—ñ–Ω–∏)\n"
            "‚Ä¢ Best of 1 (–ø–ª–µ–π-–æ—Ñ—Ñ: BO3)\n\n"
            "‚ö†Ô∏è –®—Ç—Ä–∞—Ñ–∏:\n"
            "‚Ä¢ –ó–∞–ø—ñ–∑–Ω–µ–Ω–Ω—è 15+ —Ö–≤ = –ø–æ—Ä–∞–∑–∫–∞\n"
            "‚Ä¢ –¢–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å = –¥–∏—Å–∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è\n\n"
            "üì¢ –ü–æ–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞: " + GROUP_LINK
        )
        await query.message.edit_text(
            rules_text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')
            ]])
        )

    # ============= –ê–î–ú–Ü–ù –§–£–ù–ö–¶–Ü–á =============

    elif data == 'admin_stats':
        if not is_admin(query.from_user.id):
            await query.message.edit_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
            return

        registrations = load_data(REGISTRATIONS_FILE)
        subscribers = load_data(SUBSCRIBERS_FILE)

        stats_text = (
            f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
            f"üë• –ü—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤: {len(subscribers)}\n"
            f"üèÜ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥: {len(registrations)}\n"
            f"üë§ –ì—Ä–∞–≤—Ü—ñ–≤: {len(registrations) * 5}\n"
        )

        await query.message.edit_text(stats_text, reply_markup=get_admin_menu())

    elif data == 'admin_teams_full':
        if not is_admin(query.from_user.id):
            await query.message.edit_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
            return

        registrations = load_data(REGISTRATIONS_FILE)

        if not registrations:
            await query.message.edit_text(
                "üìã –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥",
                reply_markup=get_admin_menu()
            )
            return

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–∂–Ω—É –∫–æ–º–∞–Ω–¥—É –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        await query.message.edit_text(
            f"üìã –í—Å—å–æ–≥–æ –∫–æ–º–∞–Ω–¥: {len(registrations)}\n\n"
            f"–í—ñ–¥–ø—Ä–∞–≤–ª—è—é –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...",
            reply_markup=get_admin_menu()
        )

        for i, team in enumerate(registrations):
            team_text = format_team_full(team, i)
            await query.message.reply_text(team_text)

    elif data == 'admin_edit':
        if not is_admin(query.from_user.id):
            await query.message.edit_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
            return

        registrations = load_data(REGISTRATIONS_FILE)

        if not registrations:
            await query.message.edit_text(
                "üìã –ù–µ–º–∞—î –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è",
                reply_markup=get_admin_menu()
            )
            return

        keyboard = []
        for i, team in enumerate(registrations):
            keyboard.append([InlineKeyboardButton(
                f"{i+1}. {team['team_name']} [{team['team_tag']}]",
                callback_data=f'edit_team_{i}'
            )])
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_admin')])

        await query.message.edit_text(
            "‚úèÔ∏è –û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data.startswith('edit_team_'):
        team_index = int(data.split('_')[2])
        context.user_data['editing_team_index'] = team_index
        team = get_team_by_index(team_index)

        if not team:
            await query.message.edit_text("‚ùå –ö–æ–º–∞–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", reply_markup=get_admin_menu())
            return

        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏", callback_data='edit_field_team_name')],
            [InlineKeyboardButton("–¢–µ–≥ –∫–æ–º–∞–Ω–¥–∏", callback_data='edit_field_team_tag')],
            [InlineKeyboardButton("–ö–∞–ø—ñ—Ç–∞–Ω - –Ω—ñ–∫", callback_data='edit_field_cap_nick')],
            [InlineKeyboardButton("–ö–∞–ø—ñ—Ç–∞–Ω - —ñ–º'—è", callback_data='edit_field_cap_name')],
            [InlineKeyboardButton("–ö–∞–ø—ñ—Ç–∞–Ω - –≤—ñ–∫", callback_data='edit_field_cap_age')],
            [InlineKeyboardButton("–ö–∞–ø—ñ—Ç–∞–Ω - Steam ID", callback_data='edit_field_cap_steam')],
            [InlineKeyboardButton("–ö–∞–ø—ñ—Ç–∞–Ω - Discord", callback_data='edit_field_cap_discord')],
            [InlineKeyboardButton("–ö–∞–ø—ñ—Ç–∞–Ω - Telegram", callback_data='edit_field_cap_tg')],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_edit')],
        ]

        await query.message.edit_text(
            f"‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏:\n{team['team_name']} [{team['team_tag']}]\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –ø–æ–ª–µ –¥–ª—è –∑–º—ñ–Ω–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data.startswith('edit_field_'):
        field = data.replace('edit_field_', '')
        context.user_data['editing_field'] = field

        field_names = {
            'team_name': '–ù–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏',
            'team_tag': '–¢–µ–≥ –∫–æ–º–∞–Ω–¥–∏',
            'cap_nick': '–ù—ñ–∫–Ω–µ–π–º –∫–∞–ø—ñ—Ç–∞–Ω–∞',
            'cap_name': "–Ü–º'—è –∫–∞–ø—ñ—Ç–∞–Ω–∞",
            'cap_age': '–í—ñ–∫ –∫–∞–ø—ñ—Ç–∞–Ω–∞',
            'cap_steam': 'Steam ID –∫–∞–ø—ñ—Ç–∞–Ω–∞',
            'cap_discord': 'Discord –∫–∞–ø—ñ—Ç–∞–Ω–∞',
            'cap_tg': 'Telegram –∫–∞–ø—ñ—Ç–∞–Ω–∞',
        }

        await query.message.edit_text(
            f"‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–ª—è:\n"
            f"üìù {field_names.get(field, field)}\n\n"
            f"–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º."
        )

    elif data == 'admin_delete':
        if not is_admin(query.from_user.id):
            await query.message.edit_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
            return

        registrations = load_data(REGISTRATIONS_FILE)

        if not registrations:
            await query.message.edit_text(
                "üìã –ù–µ–º–∞—î –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
                reply_markup=get_admin_menu()
            )
            return

        keyboard = []
        for i, team in enumerate(registrations):
            keyboard.append([InlineKeyboardButton(
                f"üóë {i+1}. {team['team_name']} [{team['team_tag']}]",
                callback_data=f'delete_team_{i}'
            )])
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_admin')])

        await query.message.edit_text(
            "üóë –û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data.startswith('delete_team_'):
        team_index = int(data.split('_')[2])
        deleted_team = delete_team(team_index)

        if deleted_team:
            await query.message.edit_text(
                f"‚úÖ –ö–æ–º–∞–Ω–¥—É –≤–∏–¥–∞–ª–µ–Ω–æ:\n"
                f"{deleted_team['team_name']} [{deleted_team['team_tag']}]",
                reply_markup=get_admin_menu()
            )
        else:
            await query.message.edit_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏",
                reply_markup=get_admin_menu()
            )

    elif data == 'back_to_admin':
        await query.message.edit_text(
            "üîß –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=get_admin_menu()
        )

    elif data == 'admin_broadcast':
        if not is_admin(query.from_user.id):
            await query.message.edit_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
            return

        await query.message.edit_text(
            "üì¢ –†–û–ó–°–ò–õ–ö–ê\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/broadcast –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n"
            "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º.",
            reply_markup=get_admin_menu()
        )

    elif data == 'admin_giveaway':
        if not is_admin(query.from_user.id):
            await query.message.edit_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
            return

        await query.message.edit_text(
            "üéÅ –†–û–ó–Ü–ì–†–ê–®\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/giveaway\n\n"
            "–ë—É–¥–µ –æ–±—Ä–∞–Ω–æ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è.",
            reply_markup=get_admin_menu()
        )

# ============= –û–ë–†–û–ë–ù–ò–ö –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø =============

async def handle_edit_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ"""
    if 'editing_team_index' not in context.user_data or 'editing_field' not in context.user_data:
        return

    if not is_admin(update.effective_user.id):
        return

    team_index = context.user_data['editing_team_index']
    field = context.user_data['editing_field']
    new_value = update.message.text

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if field == 'cap_steam' and not validate_steam_id(new_value):
        await update.message.reply_text(
            "‚ùå Steam ID –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ (–º—ñ–Ω—ñ–º—É–º 8)\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return

    if field == 'cap_age':
        try:
            age = int(new_value)
            if age < 16:
                await update.message.reply_text("‚ùå –í—ñ–∫ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 16 —Ä–æ–∫—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
                return
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è
    team = get_team_by_index(team_index)
    if team:
        team[field] = new_value
        if update_team(team_index, team):
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª–µ –æ–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                f"–ö–æ–º–∞–Ω–¥–∞: {team['team_name']}\n"
                f"–ü–æ–ª–µ: {field}\n"
                f"–ù–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {new_value}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –î–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data='back_to_admin')
                ]])
            )
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")

    # –û—á–∏—â–µ–Ω–Ω—è
    context.user_data.pop('editing_team_index', None)
    context.user_data.pop('editing_field', None)

# ============= –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –ö–û–ú–ê–ù–î–ò =============

async def register_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"""
    await update.message.reply_text(
        "üìù –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –ö–û–ú–ê–ù–î–ò\n\n"
        "–Ø –±—É–¥—É —Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∞ –≤–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ.\n"
        "–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: /cancel\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:"
    )
    return TEAM_NAME

async def team_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['team_name'] = update.message.text
    await update.message.reply_text(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞: {update.message.text}\n\n–í–≤–µ–¥—ñ—Ç—å —Ç–µ–≥ (2-5 —Å–∏–º–≤–æ–ª—ñ–≤):")
    return TEAM_TAG

async def team_tag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tag = update.message.text.upper()
    if len(tag) < 2 or len(tag) > 5:
        await update.message.reply_text("‚ùå –¢–µ–≥ –º–∞—î –±—É—Ç–∏ 2-5 —Å–∏–º–≤–æ–ª—ñ–≤:")
        return TEAM_TAG

    context.user_data['team_tag'] = tag
    await update.message.reply_text(f"‚úÖ –¢–µ–≥: [{tag}]\n\nüëë –ö–ê–ü–Ü–¢–ê–ù\n\n–ù—ñ–∫–Ω–µ–π–º (Steam):")
    return CAP_NICK

async def captain_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['cap_nick'] = update.message.text
    await update.message.reply_text("–°–ø—Ä–∞–≤–∂–Ω—î —ñ–º'—è:")
    return CAP_NAME

async def captain_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['cap_name'] = update.message.text
    await update.message.reply_text("–í—ñ–∫:")
    return CAP_AGE

async def captain_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if age < 16:
            await update.message.reply_text("‚ùå –í—ñ–∫ –≤—ñ–¥ 16 —Ä–æ–∫—ñ–≤:")
            return CAP_AGE
        context.user_data['cap_age'] = age
        await update.message.reply_text("Steam ID (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏, –º—ñ–Ω—ñ–º—É–º 8):")
        return CAP_STEAM
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ:")
        return CAP_AGE

async def captain_steam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    steam_id = update.message.text
    if not validate_steam_id(steam_id):
        await update.message.reply_text(
            "‚ùå Steam ID –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ (–º—ñ–Ω—ñ–º—É–º 8)\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return CAP_STEAM

    context.user_data['cap_steam'] = steam_id
    await update.message.reply_text("Discord –∫–∞–ø—ñ—Ç–∞–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç: username#0000):")
    return CAP_DISCORD

async def captain_discord(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['cap_discord'] = update.message.text
    await update.message.reply_text("Telegram –∫–∞–ø—ñ—Ç–∞–Ω–∞ (@username):")
    return CAP_TG

async def captain_telegram(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['cap_tg'] = update.message.text
    await update.message.reply_text("‚úÖ –ö–∞–ø—ñ—Ç–∞–Ω –≥–æ—Ç–æ–≤–æ!\n\nüë§ –ì–†–ê–í–ï–¶–¨ 2\n\n–ù—ñ–∫–Ω–µ–π–º:")
    return P2_NICK

# –ì—Ä–∞–≤—Ü—ñ 2-5 (—Ç—ñ–ª—å–∫–∏ –æ—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è, –±–µ–∑ Discord)
async def player2_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['p2_nick'] = update.message.text
    await update.message.reply_text("–°–ø—Ä–∞–≤–∂–Ω—î —ñ–º'—è:")
    return P2_NAME

async def player2_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['p2_name'] = update.message.text
    await update.message.reply_text("–í—ñ–∫:")
    return P2_AGE

async def player2_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if age < 16:
            await update.message.reply_text("‚ùå –í—ñ–∫ –≤—ñ–¥ 16:")
            return P2_AGE
        context.user_data['p2_age'] = age
        await update.message.reply_text("Steam ID (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏):")
        return P2_STEAM
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ:")
        return P2_AGE

async def player2_steam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    steam_id = update.message.text
    if not validate_steam_id(steam_id):
        await update.message.reply_text("‚ùå Steam ID - —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ (–º—ñ–Ω—ñ–º—É–º 8):")
        return P2_STEAM

    context.user_data['p2_steam'] = steam_id
    await update.message.reply_text("‚úÖ –ì—Ä–∞–≤–µ—Ü—å 2 –≥–æ—Ç–æ–≤–æ!\n\nüë§ –ì–†–ê–í–ï–¶–¨ 3\n\n–ù—ñ–∫–Ω–µ–π–º:")
    return P3_NICK

async def player3_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['p3_nick'] = update.message.text
    await update.message.reply_text("–°–ø—Ä–∞–≤–∂–Ω—î —ñ–º'—è:")
    return P3_NAME

async def player3_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['p3_name'] = update.message.text
    await update.message.reply_text("–í—ñ–∫:")
    return P3_AGE

async def player3_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if age < 16:
            await update.message.reply_text("‚ùå –í—ñ–∫ –≤—ñ–¥ 16:")
            return P3_AGE
        context.user_data['p3_age'] = age
        await update.message.reply_text("Steam ID (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏):")
        return P3_STEAM
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ:")
        return P3_AGE

async def player3_steam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    steam_id = update.message.text
    if not validate_steam_id(steam_id):
        await update.message.reply_text("‚ùå Steam ID - —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ (–º—ñ–Ω—ñ–º—É–º 8):")
        return P3_STEAM

    context.user_data['p3_steam'] = steam_id
    await update.message.reply_text("‚úÖ –ì—Ä–∞–≤–µ—Ü—å 3 –≥–æ—Ç–æ–≤–æ!\n\nüë§ –ì–†–ê–í–ï–¶–¨ 4\n\n–ù—ñ–∫–Ω–µ–π–º:")
    return P4_NICK

async def player4_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['p4_nick'] = update.message.text
    await update.message.reply_text("–°–ø—Ä–∞–≤–∂–Ω—î —ñ–º'—è:")
    return P4_NAME

async def player4_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['p4_name'] = update.message.text
    await update.message.reply_text("–í—ñ–∫:")
    return P4_AGE

async def player4_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if age < 16:
            await update.message.reply_text("‚ùå –í—ñ–∫ –≤—ñ–¥ 16:")
            return P4_AGE
        context.user_data['p4_age'] = age
        await update.message.reply_text("Steam ID (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏):")
        return P4_STEAM
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ:")
        return P4_AGE

async def player4_steam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    steam_id = update.message.text
    if not validate_steam_id(steam_id):
        await update.message.reply_text("‚ùå Steam ID - —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ (–º—ñ–Ω—ñ–º—É–º 8):")
        return P4_STEAM

    context.user_data['p4_steam'] = steam_id
    await update.message.reply_text("‚úÖ –ì—Ä–∞–≤–µ—Ü—å 4 –≥–æ—Ç–æ–≤–æ!\n\nüë§ –ì–†–ê–í–ï–¶–¨ 5 (–æ—Å—Ç–∞–Ω–Ω—ñ–π)\n\n–ù—ñ–∫–Ω–µ–π–º:")
    return P5_NICK

async def player5_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['p5_nick'] = update.message.text
    await update.message.reply_text("–°–ø—Ä–∞–≤–∂–Ω—î —ñ–º'—è:")
    return P5_NAME

async def player5_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['p5_name'] = update.message.text
    await update.message.reply_text("–í—ñ–∫:")
    return P5_AGE

async def player5_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if age < 16:
            await update.message.reply_text("‚ùå –í—ñ–∫ –≤—ñ–¥ 16:")
            return P5_AGE
        context.user_data['p5_age'] = age
        await update.message.reply_text("Steam ID (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏):")
        return P5_STEAM
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ:")
        return P5_AGE

async def player5_steam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    steam_id = update.message.text
    if not validate_steam_id(steam_id):
        await update.message.reply_text("‚ùå Steam ID - —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ (–º—ñ–Ω—ñ–º—É–º 8):")
        return P5_STEAM

    context.user_data['p5_steam'] = steam_id
    await update.message.reply_text(
        "‚úÖ –í—Å—ñ –≥—Ä–∞–≤—Ü—ñ –≥–æ—Ç–æ–≤—ñ!\n\n"
        "–Ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ? (—è–∫—â–æ –Ω—ñ - –Ω–∞–ø–∏—à—ñ—Ç—å '-')"
    )
    return COMMENTS

async def comments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comments = update.message.text
    context.user_data['comments'] = comments if comments != '-' else "–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"

    data = context.user_data
    summary = (
        f"üìã –ü–Ü–î–°–£–ú–û–ö\n\n"
        f"üèÜ {data['team_name']} [{data['team_tag']}]\n\n"
        f"üëë –ö–∞–ø—ñ—Ç–∞–Ω: {data['cap_nick']} ({data['cap_age']}—Ä)\n"
        f"   Discord: {data['cap_discord']}\n"
        f"   Steam: {data['cap_steam']}\n\n"
        f"üë• –°–∫–ª–∞–¥:\n"
        f"2. {data['p2_nick']} ({data['p2_age']}—Ä) - {data['p2_steam']}\n"
        f"3. {data['p3_nick']} ({data['p3_age']}—Ä) - {data['p3_steam']}\n"
        f"4. {data['p4_nick']} ({data['p4_age']}—Ä) - {data['p4_steam']}\n"
        f"5. {data['p5_nick']} ({data['p5_age']}—Ä) - {data['p5_steam']}\n\n"
        f"üí¨ {data['comments']}\n\n"
        f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏?"
    )

    keyboard = [['‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(summary, reply_markup=reply_markup)
    return CONFIRM

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text

    if '‚úÖ' in choice:
        data = context.user_data
        data['timestamp'] = datetime.now().isoformat()
        data['user_id'] = update.effective_user.id

        registrations = load_data(REGISTRATIONS_FILE)
        registrations.append(data)
        save_data(REGISTRATIONS_FILE, registrations)

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º
        admin_msg = format_team_full(data, len(registrations) - 1)

        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üÜï –ù–û–í–ê –ö–û–ú–ê–ù–î–ê!\n\n{admin_msg}"
                )
            except:
                pass

        await update.message.reply_text(
            "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
            "–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—ñ–≤.\n\n"
            f"–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å: {GROUP_LINK}",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data.clear()
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ. –î–ª—è –Ω–æ–≤–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: /register",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data.clear()
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    context.user_data.clear()
    return ConversationHandler.END

# ============= –ê–î–ú–Ü–ù –§–£–ù–ö–¶–Ü–á =============

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    if not context.args:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /broadcast –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        return

    message = ' '.join(context.args)
    subscribers = load_data(SUBSCRIBERS_FILE)

    success = 0
    failed = 0

    for user_id in subscribers:
        try:
            await context.bot.send_message(chat_id=user_id, text=f"üì¢ {message}")
            success += 1
        except:
            failed += 1

    await update.message.reply_text(
        f"‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
        f"–£—Å–ø—ñ—à–Ω–æ: {success}\n"
        f"–ü–æ–º–∏–ª–æ–∫: {failed}"
    )

async def giveaway(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    subscribers = load_data(SUBSCRIBERS_FILE)

    if not subscribers:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤")
        return

    import random
    winner_id = random.choice(subscribers)

    try:
        winner = await context.bot.get_chat(winner_id)
        winner_name = winner.first_name
        winner_username = winner.username

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        winner_info = f"üë§ {winner_name}"
        if winner_username:
            winner_info += f"\nüì± @{winner_username}"
        else:
            winner_info += f"\nüÜî ID: {winner_id}"

        await update.message.reply_text(
            f"üéÅ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å —Ä–æ–∑—ñ–≥—Ä–∞—à—É:\n\n"
            f"{winner_info}"
        )

        await context.bot.send_message(
            chat_id=winner_id,
            text="üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à! –û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∏ –∑–≤'—è–∂—É—Ç—å—Å—è –∑ –≤–∞–º–∏."
        )
    except:
        await update.message.reply_text(f"üéÅ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: ID {winner_id}")

# ============= –ó–ê–ü–£–°–ö –ë–û–¢–ê =============

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""

    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–æ–±–Ω–∏–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('register', register_command)],
        states={
            TEAM_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, team_name)],
            TEAM_TAG: [MessageHandler(filters.TEXT & ~filters.COMMAND, team_tag)],
            CAP_NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, captain_nickname)],
            CAP_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, captain_name)],
            CAP_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, captain_age)],
            CAP_STEAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, captain_steam)],
            CAP_DISCORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, captain_discord)],
            CAP_TG: [MessageHandler(filters.TEXT & ~filters.COMMAND, captain_telegram)],
            P2_NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, player2_nick)],
            P2_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, player2_name)],
            P2_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, player2_age)],
            P2_STEAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, player2_steam)],
            P3_NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, player3_nick)],
            P3_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, player3_name)],
            P3_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, player3_age)],
            P3_STEAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, player3_steam)],
            P4_NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, player4_nick)],
            P4_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, player4_name)],
            P4_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, player4_age)],
            P4_STEAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, player4_steam)],
            P5_NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, player5_nick)],
            P5_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, player5_name)],
            P5_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, player5_age)],
            P5_STEAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, player5_steam)],
            COMMENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, comments)],
            CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CommandHandler("giveaway", giveaway))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_callback))

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (–ø—Ä–∞—Ü—é—î –ø–æ–∑–∞ ConversationHandler)
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_edit_input
    ))

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':

    main()




